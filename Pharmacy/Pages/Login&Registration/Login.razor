@page "/login"
@layout NavLayout

@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm


<div class=" d-flex align-items-center justify-content-center mt-5">
    <div class="card gap-3 Login-Card" style="width: 28rem;">
        <h3 class="text-center">Login</h3>

        <input type="text" @bind="Username" class="form-control" placeholder="Enter Username">
        <input type="text" class="form-control" @bind="Password" placeholder="Enter Password">
        <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        @if (check)
        {
            <p class="text-danger text-center">@Message</p>
        }
    </div>
</div>




@code {

    protected EntRegistration _Model { get; set; } = new EntRegistration();

    private string? Username { get; set; }
    private string? Password { get; set; }
    bool check = false;
    private string? pharmacyId { get; set; }
    public string? Message { get; set; }
    private async Task Authenticate()
    {
        _Model = DALCRUD.GetUserByName(Username);

        if (_Model != null && _Model.Password != null && _Model.Password == Password)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserId = _Model.pk_pharmacyId, // Use the appropriate property from your model
                    UserName = _Model.Username, // Use the appropriate property from your model
                    Role = _Model.Role, // Use the appropriate property from your model
                    PharmacyName=_Model.PharmacyName
                });

            // Once the authentication state has been updated, navigate to the desired location
            nm.NavigateTo("/aboutus", forceLoad: true);
        }
        else
        {
            check = true;
            Message = "Invalid UserName and Password ! ";
        }
    }


}