@page "/salesrecord"

@using FluentValidation
@using System.Data.SqlClient;
@using System.Net.Http.Json
@inject HttpClient httpClient

<MudCard Class="container justify-content-center h-100 mb-5">
    <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
        <MudText Typo="Typo.h4" Class="fw-bold text-center">Sales Record</MudText>
        <MudCardContent>

            <div class="d-flex flex-grow-1 gap-4">
                <MudDatePicker For="@(() => model.From)" @bind-Date="model.From" Label="MfgDate" />
                <MudDatePicker For="@(() => model.To)" @bind-Date="model.To" Label="ExpDate" />
            </div>

        </MudCardContent>

    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Warning" Size="Size.Large" Class="ml-auto" OnClick="@(async () => await GetSalesRecord())">Get</MudButton>
    </MudCardActions>
</MudCard>

<MudTable Items="@medicineList" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<EntPointOfSale,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Sales Record</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>

        <MudTh>CustomerName</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>TotalPrice</MudTh>
        <MudTh>DiscountPrice</MudTh>
        <MudTh>DiscountPercentage</MudTh>
        <MudTh>GrandTotal</MudTh>

    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="Sign">@context.CustomerName</MudTd>
        <MudTd DataLabel="Name">@context.Quantity</MudTd>
        <MudTd DataLabel="Position">@context.TotalPrice</MudTd>
        <MudTd DataLabel="Molar mass">@context.DiscountPrice</MudTd>
        <MudTd DataLabel="Molar mass">@context.DiscountPercentage</MudTd>
        <MudTd DataLabel="Molar mass">@context.GrandTotal</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />

</div>

@code {

    [Inject] ISnackbar? Snackbar { get; set; }
    DataTable dt = new DataTable();
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private EntPointOfSale selectedItem1 = null;
    private HashSet<EntPointOfSale> selectedItems = new HashSet<EntPointOfSale>();
    List<EntPointOfSale> medicineList = new List<EntPointOfSale>();
    MudForm? form;
    EntPointOfSale model = new EntPointOfSale();
    OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();
    OrderDetailsModelFluentValidator orderDetailsValidator = new OrderDetailsModelFluentValidator();
    
    public class OrderModelFluentValidator : AbstractValidator<EntPointOfSale>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.From)
                .NotEmpty();

            RuleFor(x => x.To)
             .NotEmpty();

        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<EntPointOfSale>.CreateWithOptions((EntPointOfSale)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
    
    public class OrderDetailsModelFluentValidator : AbstractValidator<EntPointOfSale>
    {


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<EntPointOfSale>.CreateWithOptions((EntPointOfSale)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    protected async Task GetSalesRecord()
    {

        await form!.Validate();
        SqlParameter[] sp =
        {
            new SqlParameter("@From",model.From),
            new SqlParameter("@To",model.To),

    };
        dt = await DALCRUD.ReadDataSpecific("SP_GetSalesRecord", sp);
        ConvertDataIntoArray();


        if (form.IsValid)
        {
            Snackbar!.Add("Submited!");
        }

    }

    private IEnumerable<EntPointOfSale> Elements = new List<EntPointOfSale>();

    private bool FilterFunc1(EntPointOfSale element) => FilterFunc(element, searchString1);

    private bool FilterFunc(EntPointOfSale element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        // if (element.GrandTotal!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        // if (element.To!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        // if (element.From!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        if ($"{element.Quantity} {element.Quantity} ".Contains(searchString))
            return true;
        return false;
    }

    private void ConvertDataIntoArray()
    {
        foreach (DataRow row in dt.Rows)
        {
            EntPointOfSale entSalesRecord = new EntPointOfSale
                {
                    // pk_MedicineId = Convert.ToInt32(row["pk_MedicineId"]), // Adjust column names as needed
                    // fk_UserId = Convert.ToInt32(row["fk_UserId"]),
                    GrandTotal = Convert.ToInt32(row["GrandTotal"]),
                    Quantity = Convert.ToInt32(row["Quantity"]),
                    CustomerName = row["CustomerName"].ToString(),
                    DiscountPrice = Convert.ToInt32(row["DiscountPrice"]),
                    DiscountPercentage = Convert.ToInt32(row["DiscountPercentage"]),
                    TotalPrice = row["TotalPrice"].ToString(),
                    // From = Convert.ToDateTime(row["From"]),
                    // To = Convert.ToDateTime(row["To"]),
                    CurrentDate = Convert.ToDateTime(row["CurrentDate"]),
                };

            medicineList.Add(entSalesRecord);
        }

    }

}


