@page "/salesrecord"
@attribute [Authorize(Roles = "Admin,User")]
<PageTitle>Sales Record</PageTitle>


<div class="container">
    <div class="row">
        <div class="col-md-5">
            <div class="form-group">
                <label for="birthday">StartDate:</label>
                <input type="date" @bind="model.From" class="form-control" />
            </div>
        </div>
        <div class="col-md-5">
            <label for="birthday">EndDate:</label>
            <input type="date" @bind="model.To" class="form-control" />
        </div>
        <div class="col-md-2" >
            

            <button class="btn btn-primary " style="margin-top:2rem;" @onclick="GetSalesRecord">Get Record</button>
        </div>
    </div>
</div>

<div class="card mt-2">
    <div class="card-header">
        <h3 class="card-title">Sales Record</h3>
    </div>
    <!-- /.card-header -->
    <div class="card-body table-responsive">
        <table id="myTable" class="table table-bordered table-striped">
            <thead>
                <tr>
                    
                    <th>TotalPrice</th>
                    <th>DiscountPrice </th>
                    <th>DiscountPercentage</th>
                    <th>GrandTotal</th>
                    
                </tr>
            </thead>
            <tbody>

                @foreach (DataRow row in dt.Rows)
                {
                    <tr>
                        
                       
                        <td>@row["TotalPrice"]</td>
                        <td>@row["Discount"]</td>
                        <td>@row["DiscountPerc"]</td>
                        <td>@row["GrandTotal"]</td>
                      
                      
                    </tr>
                }
            </tbody>
           
        </table>
    </div>
    <!-- /.card-body -->
</div>
@code{
    EntPointOfSale model = new EntPointOfSale();
    DataTable dt = new DataTable();
    protected  async Task GetSalesRecord()
    {
        SqlParameter[] sp =
        {

            new SqlParameter("@pharmacyId",v[0]),
            new SqlParameter("@From",model.From),
            new SqlParameter("@To",model.To),

    };
        dt = await DALCRUD.ReadDataSpecific("SP_GetSalesRecord", sp);
    }

    public string[] v { get; set; } = { "Guest", "Guest" };


    public string? value1 { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticatestate { get; set; }
    protected override void OnInitialized()
    {
        DisplayGreeting();

    }
    private async Task DisplayGreeting()
    {
        var authState = await authenticatestate;
        value1 = $"{authState.User.Identity.Name}";
        v = value1.Split(',');
        StateHasChanged();
    }
}