@page "/dashboard"
@attribute [Authorize(Roles = "Admin,User")]
@using ChartJs.Blazor.PieChart
<div class="wrapper">

    <!-- Preloader -->
    <!-- Navbar -->
    <!-- /.navbar -->
    <!-- Content Wrapper. Contains page content -->
    <!-- Content Header (Page header) -->
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0" style="font-size: 40px;font-weight:bold;">Dashboard</h1>
                </div><!-- /.col -->
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="/dashboard">Home</a></li>
                        <li class="breadcrumb-item active">Dashboard v1</li>
                    </ol>
                </div><!-- /.col -->
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </div>
    <!-- /.content-header -->
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <!-- Small boxes (Stat box) -->
            <div class="row">
                <div class="col-lg-3 col-6">
                    <!-- small box -->
                    <div class="small-box bg-danger" >
                        <div class="inner">
                            @if (CountList != null)
                            {
                                <h3>@CountList!.MedCounts</h3>
                            }
                            <p>Medicine Record</p>
                        </div>
                        <div class="icon">
                            <i class="ion ion-bag"></i>
                        </div>
                        <a href="/medicinerecord" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                    </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">
                    <!-- small box -->
                    <div class="small-box bg-success">
                        <div class="inner">
                             @if (CountList != null)
                            {
                                <h3>@CountList!.SalesCounts</h3>
                            }
                            <p>Sales Record</p>
                        </div>
                        <div class="icon">
                            <i class="ion ion-stats-bars"></i>
                        </div>
                        <a href="/salesrecord" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                    </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">
                    <!-- small box -->
                    <div class="small-box bg-warning text-white">
                        <div class="inner">
                             @if (CountList != null)
                            {
                                <h3>@CountList!.UserCounts</h3>
                            }
                            <p>User Registrations</p>
                        </div>
                        <div class="icon">
                            <i class="ion ion-person-add "></i>
                        </div>
                        <a href="/employeeRecord" class="small-box-footer  ">More info <i class="fas fa-arrow-circle-right "></i></a>
                    </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">
                    <!-- small box -->
                    <div class="small-box text-white" style="background-color: #288AA7;">
                        <div class="inner">
                            <h3>65</h3>

                            <p>Unique Visitors</p>
                        </div>
                        <div class="icon">
                            <i class="ion ion-pie-graph"></i>
                        </div>
                        <a href="/dashboard" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                    </div>
                </div>
                <!-- ./col -->
            </div>
            <!-- /.row -->
            <!-- Main row -->
          
            <!-- /.row (main row) -->
        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->
<div class="container mt-5">
    <div class="card  mx-auto" style="max-width: 500px;">
        <div class="card-header  text-white" style="background-color:#11333A">
            <div class="card-title fw-4 fs-3">
                <i class="fas fa-chart-pie me-2"></i> Records Chart
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-lg-12 col-md-8">
                    <div class="chart-container">
                        <Chart Config="_config"></Chart>
                    </div>
                </div>
                <div class="col-lg-12 mt-3 text-center">
                    <p class="text">Sales Data - Year 2023</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    // Private field to store counts retrieved from the data access layer
    private EntCounts? CountList;

    // Method to load counts from the data access layer
    private void LaodCount()
    {
        // Retrieve counts based on the first element of the 'v' array
        this.CountList = DALCRUD.GetCount(int.Parse(v[0]));
    }

    // Private field to store pie chart configuration
    private PieConfig _config;

    // Override method called when the component is initialized
    protected override void OnInitialized()
    {
        // Takes value from session
        DisplayGreeting();

        // Load counts
        LaodCount();

        // Check if counts are available
        if (CountList != null)
        {
            // Initialize pie chart configuration
            _config = new PieConfig
                {
                    Options = new PieOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Records"
                        },
                        AspectRatio = 1,
                        MaintainAspectRatio = false,
                        ResponsiveAnimationDuration = 200
                    }
                };

            // Add labels for the pie chart
            foreach (string color in new[] { "Medicine Records", "User Records", "Sales Record" })
            {
                _config.Data.Labels.Add(color);
            }

            // Create a dataset for the pie chart with counts and corresponding colors
            PieDataset<int> dataset = new PieDataset<int>(new[] { CountList!.MedCounts, CountList!.UserCounts, CountList!.SalesCounts })
                {
                    BackgroundColor = new[]
                    {
                ColorUtil.ColorHexString(255, 99, 132),   // Slice 1 aka "Red"
                ColorUtil.ColorHexString(255, 205, 86),   // Slice 2 aka "Yellow"
                ColorUtil.ColorHexString(75, 192, 192),   // Slice 3 aka "Green"
            }
                };

            // Add the dataset to the pie chart configuration
            _config.Data.Datasets.Add(dataset);
        }
    }

    // Array property representing some values
    public string[] v { get; set; } = { "1", "Guest", "Pharmacy" };

    // Nullable string property
    public string? value1 { get; set; }

    // Cascading parameter for authentication state
    [CascadingParameter]
    private Task<AuthenticationState> authenticatestate { get; set; } 

    // Method to display a greeting based on authentication state
    private async Task DisplayGreeting()
    {
        // Get authentication state
        var authState = await authenticatestate;

        // Set the value1 property to the user's identity name
        value1 = $"{authState.User.Identity.Name}";

        // Split the value1 property and update the 'v' array
            v = value1.Split(',');

        // Notify the component that its state has changed
        StateHasChanged();
    }

}