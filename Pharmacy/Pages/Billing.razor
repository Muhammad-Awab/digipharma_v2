@page "/billing"
@attribute [Authorize(Roles = "Admin,User")]

<div class="container mt-2">
    <h2 class="text-black mb-4">BILLING DETAILS</h2>

    <section class="mb-4">
        <EditForm Model="_ModelBilling">
            <div class="row">
                <div class="col-md-5">
                    <div class="form-group h6">
                        <label for="billingId">Billing ID</label>
                        <input id="billingId" name="ID" @bind="_ModelBilling.pk_BillingId" class="form-control border-2 border-primary-subtle" />

                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-md-7 ">
                    <button class="btn btn-info " @onclick="GetInitialData">GetData</button>
                </div>
            </div>


            <div class="row">
                <div class="col-md-3">
                    <div class="form-group h6">
                        <label for="totalPrice">Total Price</label>
                        <input id="totalPrice" name="ID" @bind="_ModelBilling.TotalPrice" required class="form-control border-2 border-primary-subtle" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group h6">
                        <label for="discount">Discount</label>
                        <input id="discount" name="Email" @bind="_ModelBilling.Discount" required class="form-control border-2 border-primary-subtle" />
                    </div>
                </div>



                <div class="col-md-3">
                    <div class="form-group h6">
                        <label for="phone">Phone</label>
                        <input id="phone" name="Phone" @bind="_ModelBilling.DiscountPerc" required class="form-control border-2 border-primary-subtle" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group h6 ">
                        <label for="discountPerc">Discount Percentage</label>
                        <input id="discountPerc" type="text" name="UserName" @bind="_ModelBilling.GrandTotal" required class="form-control border-2 border-primary-subtle" />
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <button @onclick="UpdateSalesRecord" class="btn btn-info">Update Billing</button>
                </div>
            </div>
        </EditForm>
    </section>

    <section>
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="input-group w-50">
                        <input class="form-control border-2 border-primary-subtle" type="text" @bind="searchTerm" id="myInput" placeholder="Search for names.." title="Type in a name">
                        <div class="input-group-append">
                            <button type="button" class="btn btn-info" @onclick="CreatePagingInfo">Search</button>
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th class="text-black" style="background-color: #4FC3F7;"><i class="fas fa-pills"></i> Medicine ID</th>
                                <th class="text-black" style="background-color: #4FC3F7;"><i class="fas fa-prescription-bottle-alt"></i> Name</th>
                                <th class="text-black" style="background-color: #4FC3F7;"><i class="fas fa-dollar-sign"></i> Unit Price</th>
                                <th class="text-black" style="background-color: #4FC3F7;"><i class="fas fa-map-marker-alt"></i> Location</th>
                                <th class="text-black" style="background-color: #4FC3F7;"><i class="fas fa-flask"></i> Quantity</th>
                                <th class="text-black" style="background-color: #4FC3F7;"><i class="fas fa-flask"></i> Action</th>

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (DataRow row in pagedData)
                            {
                                <tr>
                                    <td>@row["pk_MedId"]</td>
                                    <td>@row["Name"]</td>
                                    <td>@row["UnitPrice"]</td>
                                    <td>@row["Location"]</td>
                                    <td>@row["Quantity"]</td>
                                    <td><a @onclick="@(()=>OpenDeleteDialog(@row["pk_MedId"].ToString(),(int)@row["Quantity"],(decimal)@row["UnitPrice"]))"><i class="fa-solid fa-trash"></i></a></td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="10">
                                    <Pagination PI="pagingInfo" PageClassesEnabled="true" PageClass="Paging" PageClassSelected="active"></Pagination>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </section>
</div>


@if (DeleteDialogOpen)
{
    <Pharmacy.Pages.Generics.DeleteModal Title="Are you sure?" FunDel="@(()=>OnDelete(@ID))" Text="Do you want to delete" OnClose="@OnDeleteDialogClose"></Pharmacy.Pages.Generics.DeleteModal>
}

@code {

    public EntBilling _ModelBilling { get; set; } = new EntBilling();

    DataTable dt = new DataTable();
    public int fk_PharmacyId { get; set; }
    public int Quantityy { get; set; }
    public decimal UnitPricee { get; set; }
    public decimal MedicineTotalPrice { get; set; }
    public string[] v { get; set; } = { "Guest", "Guest" };
    public string? value1 { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticatestate { get; set; }
    public bool DeleteDialogOpen { get; set; }
    public string? ID { get; set; }
    List<DataRow> allDataRows = new List<DataRow>();
    string searchTerm = "";
    IEnumerable<DataRow> pagedData = Enumerable.Empty<DataRow>();
    [Parameter]
    public int page { get; set; } = 1;
    int pageSize = 15;
    PagingInfo pagingInfo = new PagingInfo();
    public bool QuantityDialogOpen { get; set; }


    private void OnQuantityDialogClose(bool accepted)
    {
        QuantityDialogOpen = false;

        StateHasChanged();

    }

    private void OnQuantityDialogOpen()
    {
        QuantityDialogOpen = true;
        StateHasChanged();
    }

    public void OnQuantityChange()
    {

    }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        await OnInitializedAsync();
        StateHasChanged();

    }

    private void OpenDeleteDialog(string? Id, int Quantity, decimal UnitPrice)
    {
        DeleteDialogOpen = true;
        ID = Id;
        StateHasChanged();
        Quantityy = Quantity;
        UnitPricee = UnitPrice;

    }

    private async Task OnDelete(string id)
    {

        MedicineTotalPrice = UnitPricee * Quantityy;
        _ModelBilling.GrandTotal = _ModelBilling.GrandTotal - MedicineTotalPrice;
        _ModelBilling.TotalPrice = _ModelBilling.TotalPrice - MedicineTotalPrice;

        SqlParameter[] sp =
           {
             new SqlParameter("@id",int.Parse(id)),

       };
        await DALCRUD.CRUD("SP_DeleteSalesRecord", sp);

        addmedicineback();

        DeleteDialogOpen = false;
        GetMedicineData(_ModelBilling.pk_BillingId);

    }

    public async void UpdateSalesRecord()
    {
        SqlParameter[] sp1 =
       {
             new SqlParameter("@id",_ModelBilling.pk_BillingId),
             new SqlParameter("@TotalPrice", _ModelBilling.TotalPrice),
             new SqlParameter("@GrandTotal",_ModelBilling.GrandTotal),

       };
        await DALCRUD.CRUD("SP_UpdateSalesRecord", sp1);
        GetInitialData();
        await JS.InvokeVoidAsync("alert", $"Record Successfully Updated for {_ModelBilling.pk_BillingId}");
        nm.NavigateTo("/billing", true);

    }

    public async void addmedicineback()
    {

        SqlParameter[] sp =
        {
             new SqlParameter("@pk_MedId",int.Parse(ID)),
             new SqlParameter("@Stock",Quantityy),
    };
        await DALCRUD.CRUD("SP_AddMedicineBack", sp);
    }

    public async void GetInitialData()
    {
        var authState = await authenticatestate;
        value1 = $"{authState.User.Identity.Name}";
        v = value1.Split(',');

        _ModelBilling = DALCRUD.GetBillingRecordById(_ModelBilling.pk_BillingId, int.Parse(v[0]));
        GetMedicineData(_ModelBilling.pk_BillingId);
        if (_ModelBilling.pk_BillingId == 0)
        {
            await JS.InvokeVoidAsync("alert", $"No Record Found ");

        }




    }

    public async void GetMedicineData(int fk_BillingId)
    {

        var authState = await authenticatestate;
        value1 = $"{authState.User.Identity.Name}";
        v = value1.Split(',');


        SqlParameter[] sp =
        {
            new SqlParameter("@fk_BillingId",fk_BillingId),
            new SqlParameter("@fk_PharmacyId",v[0])
    };

        dt = await DALCRUD.ReadDataSpecific("SP_GetMedicineByBillingId", sp);
        allDataRows = dt.Rows.Cast<DataRow>().ToList();
        CreatePagingInfo();
        StateHasChanged();
    }

    private void SearchTextChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        CreatePagingInfo();
        // You can add additional logic here if needed
    }

    protected override void OnParametersSet()
    {
        CreatePagingInfo();
    }

    public void CreatePagingInfo()
    {
        pagingInfo.CurrentPage = page;
        pagingInfo.TotalItems = allDataRows.Count;
        pagingInfo.ItemsPerPage = pageSize;

        <!-- Apply search filter -->
        var filteredData = allDataRows.Where(row =>
            row["Name"].ToString()!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            row["Location"].ToString()!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

        pagingInfo.TotalItems = filteredData.Count;

        var skip = pageSize * (page - 1);

        if (searchTerm != "")
        {
            pagedData = filteredData;
        }
        else
        {
            pagedData = filteredData.Skip(skip).Take(pageSize);
        }
        Console.WriteLine($"Current Page: {page}, Total Items: {pagingInfo.TotalItems}, Page Size: {pageSize}, Skip: {skip}");
    }

    public void PageChanged(int newPage)
    {
        page = newPage;
        CreatePagingInfo();
    }

}
