@page "/medicinerecord"

<PageTitle>Medicines</PageTitle>

@using FluentValidation
<style >
    .container {
        max-width: 700px;
        margin: 0px auto 0px; 
        border-radius: 3px;
        padding: 40px;
        margin-top: 50px;
    }
</style>

<MudCard Class="container justify-content-center h-100 mb-5">
    <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
        <MudText Typo="Typo.h4" Class="fw-bold text-center">Medicine Record</MudText>
        <MudCardContent>
            <MudTextField @bind-Value="model.Name"
                          For="@(() => model.Name)"
                          Immediate="true"
                          Label="Medicine Name" />

            <MudTextField @bind-Value="model.UnitPrice"
                          For="@(() => model.UnitPrice)"
                          Immediate="true"
                          Label="UnitPrice" />

            <MudTextField @bind-Value="model.Location"
                          For="@(() => model.Location)"
                          Immediate="true"
                          Label="Location" />

            <MudTextField @bind-Value="model.Stock"
                          For="@(() => model.Stock)"
                          Immediate="true"
                          Label="Stock" />

            <MudTextField @bind-Value="model.Manufacturer"
                          For="@(() => model.Manufacturer)"
                          Immediate="true"
                          Label="Manufacturer" />

            <MudTextField @bind-Value="model.Supplier"
                          For="@(() => model.Supplier)"
                          Immediate="true"
                          Label="Supplier" />


            <div class="d-flex flex-grow-1 gap-4">
                <MudDatePicker For="@(() => model.MfgDate)" @bind-Date="model.MfgDate" Label="MfgDate" />
                <MudDatePicker For="@(() => model.ExpDate)" @bind-Date="model.ExpDate" Label="ExpDate" />  
            </div>
            

        </MudCardContent>

    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Primary" Size="Size.Large" Class="ml-auto" OnClick="@(async () => await SaveMedicineRecord())">Save</MudButton>
        @* <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await SaveMedicineRecord())">Order</MudButton> *@
    </MudCardActions>
</MudCard>

@code {
    [Inject] ISnackbar? Snackbar { get; set; }

    MudForm? form;


    EntMedicineRecord model = new EntMedicineRecord();

    OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();

    OrderDetailsModelFluentValidator orderDetailsValidator = new OrderDetailsModelFluentValidator();

    public class OrderModelFluentValidator : AbstractValidator<EntMedicineRecord>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 50);

            RuleFor(x => x.Location)
                .NotEmpty()
                .Length(1, 50);

            RuleFor(x => x.Manufacturer)
                .NotEmpty()
                .Length(1, 50);

            RuleFor(x => x.Supplier)
                .NotEmpty()
                .Length(1, 100);



        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<EntMedicineRecord>.CreateWithOptions((EntMedicineRecord)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }


   

    public class OrderDetailsModelFluentValidator : AbstractValidator<EntMedicineRecord>
    {


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<EntMedicineRecord>.CreateWithOptions((EntMedicineRecord)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
    protected async Task SaveMedicineRecord()
    {
        await form!.Validate();
        SqlParameter[] sp =
        {
            new SqlParameter("@fkUserId",1),
            new SqlParameter("@Name",model.Name),
            new SqlParameter("@UnitPrice", model.UnitPrice),
            new SqlParameter("@Location", model.Location),
            new SqlParameter("@Stock", model.Stock),
            new SqlParameter("@Manufacturer", model.Manufacturer),
            new SqlParameter("@Supplier", model.Supplier),
            new SqlParameter("@MfgDate",model.MfgDate.ToString()),
            new SqlParameter("@ExpDate", model.ExpDate.ToString())
    };
        await DALCRUD.CRUD("SP_SaveMedicineRecord", sp);
       

        if (form.IsValid)
        {
            Snackbar!.Add("Submited!");
        }
        
    }
}