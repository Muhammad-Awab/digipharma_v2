@*@page "/sales/{Page:int}"*@
@page "/sales"

<div class="card">
    <div class="card-body">
        <div class="d-flex gap-2 mt-2 mb-3">
            <input class="form-control w-50" type="text" @bind="searchTerm" @oninput="SearchTextChanged" id="myInput" placeholder="Search for names.." title="Type in a name">
            <button type="button" class="btn btn-primary" @onclick="CreatePagingInfo">Search</button>
        </div>
    </div>
    <!-- /.card-body -->
</div>

<div class="card mb-4 bg-light">
    <div class="row g-4">
        @foreach (DataRow row in pagedData)
        {
            <div class="col-md-2 border">
                <img src="https://cdn-icons-png.flaticon.com/512/9597/9597322.png" class="img-fluid rounded-start" alt="Medicine Image">
            </div>
            <div class="col-md-4"style="border-block:double;">
                <div class="card-body">
                    <p class="card-title" style="font-size:20px;">Medicine ID: @row["pk_MedId"]</p>
                    <p class="card-text" style="font-size:20px;">Name: @row["Name"]</p>
                    <p class="card-text" style="font-size:20px;">Unit Price: @row["UnitPrice"] <i class="fas fa-dollar-sign"></i></p>
                    <p class="card-text" style="font-size:20px;">Location: @row["Location"] <i class="fas fa-map-marker-alt"></i></p>
                    <p class="card-text" style="font-size:20px;">Stock: @row["Stock"] <i class="fas fa-box"></i></p>
                </div>
            </div>
        }
    </div>
</div>


@*@if (DeleteDialogOpen)
{
    <Pharmacy.Pages.Generics.DeleteModal Title="Are you sure?" FunDel="@(()=>OnDelete(@ID))" Text="Do you want to delete" OnClose="@OnDeleteDialogClose"></Pharmacy.Pages.Generics.DeleteModal>
}*@
@code {
    protected EntMedicineRecord? model { get; set; } = new EntMedicineRecord();
    public bool DeleteDialogOpen { get; set; }
    public string? ID { get; set; }
    private async Task OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        await OnInitializedAsync();
        StateHasChanged();

    }
    private void OpenDeleteDialog(string? Id)
    {
        DeleteDialogOpen = true;
        ID = Id;
        StateHasChanged();
    }
    private async Task OnDelete(string id)
    {
        SqlParameter[] sp =
           {
             new SqlParameter("@id",int.Parse(id)),

    };
        await DALCRUD.CRUD("SP_DeleteMedicineRecord", sp);
        DeleteDialogOpen = false;
        await OnInitializedAsync();

    }
    DataTable dt = new DataTable();
    List<DataRow> allDataRows = new List<DataRow>();
    string searchTerm = "";
    IEnumerable<DataRow> pagedData = Enumerable.Empty<DataRow>();
    [Parameter]
    public int page { get; set; } = 1;
    int pageSize = 15; // Change this to your desired page size

    PagingInfo pagingInfo = new PagingInfo();

    protected override async Task OnInitializedAsync()
    {
        dt = await DALCRUD.ReadTable("SP_GetMedicineRecord");
        allDataRows = dt.Rows.Cast<DataRow>().ToList();
        CreatePagingInfo();
    }
    protected override void OnParametersSet()
    {
        CreatePagingInfo();
    }
    public void CreatePagingInfo()
    {
        pagingInfo.CurrentPage = page;
        pagingInfo.TotalItems = allDataRows.Count;
        pagingInfo.ItemsPerPage = pageSize;

        // Apply search filter
        var filteredData = allDataRows.Where(row =>
      row["Name"].ToString()!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
      row["Location"].ToString()!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

        pagingInfo.TotalItems = filteredData.Count;

        var skip = pageSize * (page - 1);

        if (searchTerm != "")
        {
            pagedData = filteredData;
        }
        else
        {
            pagedData = filteredData.Skip(skip).Take(pageSize);
        }
        Console.WriteLine($"Current Page: {page}, Total Items: {pagingInfo.TotalItems}, Page Size: {pageSize}, Skip: {skip}");
    }

    public void PageChanged(int newPage)
    {
        page = newPage;
        CreatePagingInfo();

    }



    private void SearchTextChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        CreatePagingInfo();
        // You can add additional logic here if needed
    }
}
